#include <stdio.h>

#define MAX_PARTITIONS 6
#define MAX_PROCESSES 5

void best_fit(int partitions[], int processes[], int allocation[])
{
    int i, j, best_index;
    int best_size;

    for (i = 0; i < MAX_PROCESSES; i++)
    {
        best_index = -1;
        best_size = -1;

        for (j = 0; j < MAX_PARTITIONS; j++)
        {
            if (partitions[j] >= processes[i] && (best_index == -1 || partitions[j] < best_size))
            {
                best_index = j;
                best_size = partitions[j];
            }
        }

        if (best_index != -1)
        {
            allocation[i] = best_index;
            partitions[best_index] -= processes[i];
        } else
        {
            allocation[i] = -1;
        }
    }
}

int main()
{
    int partitions[MAX_PARTITIONS] = {300, 600, 350, 200, 750, 125};
    int processes[MAX_PROCESSES] = {115, 500, 358, 200, 375};
    int allocation[MAX_PROCESSES];

    best_fit(partitions, processes, allocation);

    printf("Process No.\tProcess Size\tPartition No.\n");

    for (int i = 0; i < MAX_PROCESSES; i++)
    {
        printf("%d\t\t%d\t\t", i + 1, processes[i]);
        if (allocation[i] != -1)
        {
            printf("%d\n", allocation[i] + 1);
        } else
        {
            printf("Not Allocated\n");
        }
    }

    return 0;
}
