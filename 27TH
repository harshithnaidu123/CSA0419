#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_INSTANCES 4

sem_t semaphore;

void* process(void* process_id)
{
    int pid = int process_id;

    printf("Process P%d is trying to acquire the semaphore...\n", pid);
    sem_wait(&semaphore);
    printf("Process P%d has acquired the semaphore.\n", pid);
    printf("Process P%d is performing some work...\n", pid);
    sleep(2);
    if (pid == 4)
    {
        printf("Process P%d is signaling process P5...\n", pid);
        sem_post(&semaphore);
        printf("Process P%d has signaled process P5.\n", pid);
    }

    printf("Process P%d is releasing the semaphore.\n", pid);
    sem_post(&semaphore);
    pthread_exit(NULL);
}

int main()
{
    sem_init(&semaphore, 0, NUM_INSTANCES);
    pthread_t threads[5];
    int process_ids[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; i++)
    {
        pthread_create(&threads[i], NULL, process, &process_ids[i]);
    }

    for (int i = 0; i < 5; i++)
    {
        pthread_join(threads[i], NULL);
    }
    sem_destroy(&semaphore);
    return 0;
}
