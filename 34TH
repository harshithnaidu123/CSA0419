#include<stdio.h>
#include<stdbool.h>
#define MAX_PARTITIONS 5
void worstFit(int partitions[], int n, int processes[], int m)
{
    int allocation[MAX_PARTITIONS];
    bool allocated[m];
    for (int i = 0; i < m; i++)
        allocated[i] = false;
    for (int i = 0; i < m; i++) 
    {
        int worstIdx = -1;
        for (int j = 0; j < n; j++)
        {
            if (partitions[j] >= processes[i])
            {
                if (worstIdx == -1)
                    worstIdx = j;
                else if (partitions[j] > partitions[worstIdx])
                    worstIdx = j;
            }
        }
        if (worstIdx != -1)
        {
            allocation[i] = worstIdx;
            partitions[worstIdx] -= processes[i];
            allocated[i] = true;
        }
    }
    printf("\nProcess\tProcess Size\tPartition Index\n");
    for (int i = 0; i < m; i++) 
    {
        printf("%d\t%d", i + 1, processes[i]);
        if (allocated[i])
            printf("\t\t%d\n", allocation[i] + 1);
        else
            printf("\t\tNot Allocated\n");
    }
}
int main()
{
    int partitions[] = {40, 10, 30, 60};
    int processes[] = {100, 50, 30, 120, 35};
    int n = sizeof(partitions) / sizeof(partitions[0]);
    int m = sizeof(processes) / sizeof(processes[0]);
    printf("Worst-Fit Memory Allocation:\n");
    worstFit(partitions, n, processes, m); 
    return 0;
}
