#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define SHARED_MEMORY_SIZE 1 
#define SEMAPHORE_COUNT 1
int shared_memory[SHARED_MEMORY_SIZE] = {0};
sem_t semaphores[SEMAPHORE_COUNT]; 

void *doubleValue(void *arg) 
{
    sem_wait(&semaphores[0]); 
    int value = shared_memory[0]; 
    value *= 2; // double the value
    printf("Doubled value: %d\n", value); 
    shared_memory[0] = value; 
    sem_post(&semaphores[0]); 
    pthread_exit(NULL);
}


void *multiplyValue(void *arg)
{
    sem_wait(&semaphores[0]);
    int value = shared_memory[0]; 
    value *= 5; // multiply the value by 5
    printf("Multiplied value: %d\n", value); 
    shared_memory[0] = value;
    sem_post(&semaphores[0]); 
    pthread_exit(NULL);
}

int main() 
{
    pthread_t thread1, thread2; 
    int status; 

    if (sem_init(&semaphores[0], 0, 1) == -1)
    {
        perror("sem_init");
        exit(1);
    }

    if (pthread_create(&thread1, NULL, doubleValue, NULL) != 0)
    {
        perror("pthread_create");
        exit(1);
    }

    if (pthread_create(&thread2, NULL, multiplyValue, NULL) != 0)
    {
        perror("pthread_create");
        exit(1);
    }

    if (pthread_join(thread1, (void **) &status) != 0)
    {
        perror("pthread_join");
        exit(1);
    }

    if (pthread_join(thread2, (void **) &status) != 0)
    {
        perror("pthread_join");
        exit(1);
    }

    if (sem_destroy(&semaphores[0]) == -1) 
    {
        perror("sem_destroy");
        exit(1);
    }

    return 0;
}
