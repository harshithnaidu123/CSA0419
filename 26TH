#include <stdio.h>

#define MAX_SIZE 10

struct Process {
    int burst_time;
    int priority;
};

void sort_processes(struct Process p[], int n) 
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++) 
        {
            if (p[j].priority > p[j + 1].priority) 
            {
                struct Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

void calculate_times(struct Process p[], int n, int waiting_time[], int turnaround_time[]) 
{
    waiting_time[0] = 0; 

    for (int i = 1; i < n; i++) 
    {
        waiting_time[i] = p[i - 1].burst_time + waiting_time[i - 1];
    }

    for (int i = 0; i < n; i++) {
        turnaround_time[i] = p[i].burst_time + waiting_time[i];
    }
}

void display_results(struct Process p[], int n, int waiting_time[], int turnaround_time[]) 
{
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++)
    {
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];

        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, p[i].burst_time, p[i].priority,
               waiting_time[i], turnaround_time[i]);
    }

    double avg_waiting_time = (double)total_waiting_time / n;
    double avg_turnaround_time = (double)total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2lf\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2lf\n", avg_turnaround_time);
}

int main()
{
    struct Process processes[MAX_SIZE];
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time and priority for each process:\n");
    for (int i = 0; i < n; i++) 
    {
        printf("Process P%d:\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
    }

    sort_processes(processes, n);

    int waiting_time[MAX_SIZE];
    int turnaround_time[MAX_SIZE];

    calculate_times(processes, n, waiting_time, turnaround_time);

    display_results(processes, n, waiting_time, turnaround_time);

    return 0;
}
